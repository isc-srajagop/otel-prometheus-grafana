serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

opentelemetry-collector:
  enabled: true
  nameOverride: otelcol
  mode: deployment
  presets:
    kubernetesAttributes:
      enabled: true
  resources:
    limits:
      memory: 200Mi
  service:
    type: ClusterIP
  ports:
    metrics:
      enabled: true
    prometheus:
      enabled: true
      containerPort: 9464
      servicePort: 9464
      protocol: TCP
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9464"
    opentelemetry_community_demo: "true"
  config:
    receivers:
      otlp:
        protocols:
        http:
            # Since this collector needs to receive data from the web, enable cors for all origins
            # `allowed_origins` can be refined for your deployment domain
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"
    
    exporters:
      ## Create an exporter to Jaeger using the standard `otlp` export format
      otlp:
        endpoint: '{{ include "otel-demo.name" . }}-jaeger-collector:4317'
        tls:
          insecure: true
      # Create an exporter to Prometheus (metrics)
      otlphttp/prometheus:
        endpoint: 'http://{{ include "otel-demo.name" . }}-prometheus-server:9090/api/v1/otlp'
        tls:
          insecure: true
      debug:
        verbosity: detailed
    
    processors:
      resource:
        attributes:
          - key: service.instance.id
            from_attribute: k8s.pod.uid
            action: insert
      filter/ottl:
        error_mode: ignore
        metrics:
          metric:
            # FIXME: remove when a Metrics View is implemented in the checkout and productcatalog components
            # or when this issue is resolved: https://github.com/open-telemetry/opentelemetry-go-contrib/issues/3071
            - 'name == "rpc.server.duration"'
      batch:
      transform:
        metric_statements:
          - context: metric
            statements:
              # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-java/issues/4834
              - set(description, "") where name == "queueSize"
              # FIXME: remove when these 2 issues are resolved:
              # Java: https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/9478
              # Go: https://github.com/open-telemetry/opentelemetry-go-contrib/issues/4301
              - set(description, "") where name == "rpc.server.duration"
              # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-python-contrib/issues/1958
              - set(description, "") where name == "http.client.duration"
    
    connectors:
      spanmetrics:
    
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [resource, batch]
          exporters: [otlp, debug, spanmetrics]
        metrics:
          receivers: [otlp, spanmetrics]
          processors: [filter/ottl, transform, resource, batch]
          exporters: [debug]
        logs:
          receivers: [otlp]
          processors: [filter/ottl, transform, resource, batch]
          exporters: [debug]

jaeger:
  enabled: true
  provisionDataStore:
    cassandra: false
  allInOne:
    enabled: true
    args:
      - "--memory.max-traces=8000"
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=http://{{ include \"otel-demo.name\" . }}-prometheus-server:9090"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    extraEnv:
      - name: METRICS_STORAGE_TYPE
        value: prometheus
    resources:
      limits:
        memory: 300Mi
  storage:
    type: none
  agent:
    enabled: false
  collector:
    enabled: false
  query:
    enabled: false

prometheus:
  enabled: true
  alertmanager:
    enabled: false
  configmapReload:
    prometheus:
      enabled: false
  kube-state-metrics:
    enabled: false
  prometheus-node-exporter:
    enabled: false
  prometheus-pushgateway:
    enabled: false

  server:
    extraFlags:
      - "enable-feature=exemplar-storage"
      - "enable-feature=otlp-write-receiver"
    global:
      scrape_interval: 5s
      scrape_timeout: 3s
      evaluation_interval: 30s
    persistentVolume:
      enabled: false
    service:
      servicePort: 9090
    resources:
      limits:
        memory: 300Mi

  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: 'otel-collector'
          honor_labels: true
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                own_namespace: true
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_opentelemetry_community_demo]
              action: keep
              regex: true

grafana:
  enabled: true
  grafana.ini:
    auth:
      disable_login_form: true
    auth.anonymous:
      enabled: true
      org_name: Main Org.
      org_role: Admin
    server:
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana"
      serve_from_sub_path: true
  adminPassword: admin
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          uid: webstore-metrics
          type: prometheus
          url: 'http://{{ include "otel-demo.name" . }}-prometheus-server:9090'
          editable: true
          isDefault: true
          jsonData:
            exemplarTraceIdDestinations:
              - datasourceUid: webstore-traces
                name: trace_id

              - url: http://localhost:8080/jaeger/ui/trace/$${__value.raw}
                name: trace_id
                urlDisplayLabel: View in Jaeger UI

        - name: Jaeger
          uid: webstore-traces
          type: jaeger
          url: 'http://{{ include "otel-demo.name" . }}-jaeger-query:16686/jaeger/ui'
          editable: true
          isDefault: false
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  dashboardsConfigMaps:
    default: '{{ include "otel-demo.name" . }}-grafana-dashboards'
  resources:
    limits:
      memory: 150Mi